<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Contributing on DefectDojo Documentation</title><link>https://DefectDojo.github.io/django-DefectDojo/contributing/</link><description>Recent content in Contributing on DefectDojo Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 02 Feb 2021 21:06:48 +0100</lastBuildDate><atom:link href="https://DefectDojo.github.io/django-DefectDojo/contributing/index.xml" rel="self" type="application/rss+xml"/><item><title>Branching Model</title><link>https://DefectDojo.github.io/django-DefectDojo/contributing/branching-model/</link><pubDate>Wed, 17 Feb 2021 20:46:28 +0100</pubDate><guid>https://DefectDojo.github.io/django-DefectDojo/contributing/branching-model/</guid><description>The DefectDojo team aims to release at least once a month, on the last Tuesday. Bugfix or security releases can come at any time.
In doubt, GitHub Actions are the source of truth. The releases are semi-automated right now, with a DefectDojo maintainer proceeding with each major step in the release. The steps for a regular release are:
Create the release branch from dev and prepare a PR against master (Details) &amp;ndash;&amp;gt; A maintainer verifies and manually merges the PR Tag, issue draft release and docker build+push (Details) &amp;ndash;&amp;gt; A maintainer massages the release-drafter notes and publishes the release A PR to merge master back to dev is created to re-align the branches (details) Security releases PRs that relate to security issues are done through Security advisories which provide a way to work privately on code without prematurely disclosing vulnerabilities.</description></item><item><title>Documentation</title><link>https://DefectDojo.github.io/django-DefectDojo/contributing/documentation/</link><pubDate>Tue, 02 Feb 2021 20:46:28 +0100</pubDate><guid>https://DefectDojo.github.io/django-DefectDojo/contributing/documentation/</guid><description>The documentation is build with Hugo and uses the theme Learn. The source code is located in the docs folder. Static files for the webside are build with github actions and are publish in the gh-pages branch.
How to run a local preview Install Hugo Clone the DefectDojo git repository with the option --recurse-submodules. If you have already cloned the repository, make sure that you have checkouted out the hugo theme learn or use git submoduls check it out cd docs/themes/learn &amp;amp;&amp;amp; git submodule init &amp;amp;&amp;amp; git submodule update Switch to the docs folder and start the hugo server with hot reloading hugo server -D Visit http://localhost:1313/django-DefectDojo.</description></item><item><title>How to write a DefectDojo parser</title><link>https://DefectDojo.github.io/django-DefectDojo/contributing/how-to-write-a-parser/</link><pubDate>Tue, 02 Feb 2021 20:46:28 +0100</pubDate><guid>https://DefectDojo.github.io/django-DefectDojo/contributing/how-to-write-a-parser/</guid><description>All commands assume that you&amp;rsquo;re located at the root of the django-DefectDojo cloned repo.
Pre-requisites You have forked https://github.com/DefectDojo/django-DefectDojo and cloned locally. Checkout dev and make sure you&amp;rsquo;re up to date with the latest changes. It&amp;rsquo;s advised that you create a dedicated branch for your development, such as git checkout -b parser-name yet that&amp;rsquo;s up to you. It is probably easier to use the docker-compose stack (and benefit from the hot-reload capbility for uWSGI).</description></item></channel></rss>
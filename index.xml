<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DefectDojo's Documentation on DefectDojo Documentation</title><link>https://DefectDojo.github.io/django-DefectDojo/</link><description>Recent content in DefectDojo's Documentation on DefectDojo Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 02 Feb 2021 20:46:29 +0100</lastBuildDate><atom:link href="https://DefectDojo.github.io/django-DefectDojo/index.xml" rel="self" type="application/rss+xml"/><item><title>About DefectDojo</title><link>https://DefectDojo.github.io/django-DefectDojo/basics/about/</link><pubDate>Tue, 02 Feb 2021 20:46:28 +0100</pubDate><guid>https://DefectDojo.github.io/django-DefectDojo/basics/about/</guid><description>DefectDojo Basics Terms There are several terms that will be helpful to understand as you work with DefectDojo
Products This is the name of any project, program, team, or company that you are currently testing.
Examples
Wordpress Internal wiki Slack Product types These can be business unit divisions, different offices or locations, or any other logical way of distinguishing &amp;quot;types&amp;quot; of products.
Examples
Internal / 3rd party Main company / Acquisition San Francisco / New York offices Engagements Engagements are moments in time when testing is taking place.</description></item><item><title>Getting Started</title><link>https://DefectDojo.github.io/django-DefectDojo/running/getting-started/</link><pubDate>Tue, 02 Feb 2021 20:46:28 +0100</pubDate><guid>https://DefectDojo.github.io/django-DefectDojo/running/getting-started/</guid><description>Docker Compose Install (recommended) Go to https://github.com/DefectDojo/django-DefectDojo Select the appropriate branch you're working on Instructions in the [[DOCKER.md]{.title-ref}](https://github.com/DefectDojo/django-DefectDojo/blob/master/DOCKER.md) file at the root of the repository. Kubernetes Go to https://github.com/DefectDojo/django-DefectDojo Select the appropriate branch you're working on Instructions in the [[KUBERNETES.md]{.title-ref}](https://github.com/DefectDojo/django-DefectDojo/blob/master/KUBERNETES.md) file at the root of the repository. Setup.bash Install (no longer maintained) This installation method will is EOL and will be removed on 2020-12-31
Go to https://github.</description></item><item><title>Models</title><link>https://DefectDojo.github.io/django-DefectDojo/basics/models/</link><pubDate>Tue, 02 Feb 2021 20:46:28 +0100</pubDate><guid>https://DefectDojo.github.io/django-DefectDojo/basics/models/</guid><description>DefectDojo attempts to simplify how users interact with the system by minimizing the number of objects it defines. The definition for each as well as sample usages is below.
Product Types Product types represent the top level model, these can be business unit divisions, different offices or locations, development teams, or any other logical way of distinguishing &amp;quot;types&amp;quot; of products.
Examples: IAM Team Internal / 3rd Party Main company / Acquisition San Francisco / New York offices Products This is the name of any project, program, or product that you are currently testing.</description></item><item><title>Features</title><link>https://DefectDojo.github.io/django-DefectDojo/basics/features/</link><pubDate>Tue, 02 Feb 2021 20:46:28 +0100</pubDate><guid>https://DefectDojo.github.io/django-DefectDojo/basics/features/</guid><description>Below are the main sections within DefectDojo. Each is designed to allow for ease of use and simple organization of Products and their Tests. The models page will help you understand the terminology we use below, so we recommend taking a look at that first.
Products The following attributes describe a Product:
Name A short name for the product, used for easy identification. This field can hold up to 300 characters.</description></item><item><title>Workflows</title><link>https://DefectDojo.github.io/django-DefectDojo/basics/workflows/</link><pubDate>Tue, 02 Feb 2021 20:46:28 +0100</pubDate><guid>https://DefectDojo.github.io/django-DefectDojo/basics/workflows/</guid><description>=
Example 1 - Bill the security engineer Bill wants a place to keep track of what he's worked on, so that he can show his boss exactly what issues he reports, and statistics about how long it takes to close them.
When he is asked to audit an application, Bill registers a new Product in DefectDojo, and creates a new Engagement. Here he sets some basic information, like how long he expects the Engagement will take, who will be leading the testing (himself), what Product he will be working on, and what tests he will be doing.</description></item><item><title>Branching Model</title><link>https://DefectDojo.github.io/django-DefectDojo/contributing/branching-model/</link><pubDate>Wed, 17 Feb 2021 20:46:28 +0100</pubDate><guid>https://DefectDojo.github.io/django-DefectDojo/contributing/branching-model/</guid><description>The DefectDojo team aims to release at least once a month, on the last Tuesday. Bugfix or security releases can come at any time.
In doubt, GitHub Actions are the source of truth. The releases are semi-automated right now, with a DefectDojo maintainer proceeding with each major step in the release. The steps for a regular release are:
Create the release branch from dev and prepare a PR against master (Details) &amp;ndash;&amp;gt; A maintainer verifies and manually merges the PR Tag, issue draft release and docker build+push (Details) &amp;ndash;&amp;gt; A maintainer massages the release-drafter notes and publishes the release A PR to merge master back to dev is created to re-align the branches (details) Security releases PRs that relate to security issues are done through Security advisories which provide a way to work privately on code without prematurely disclosing vulnerabilities.</description></item><item><title>Configuration</title><link>https://DefectDojo.github.io/django-DefectDojo/running/configuration/</link><pubDate>Tue, 02 Feb 2021 20:46:28 +0100</pubDate><guid>https://DefectDojo.github.io/django-DefectDojo/running/configuration/</guid><description>For more info on custom settings and use of custom settings during development, please see: [settings.py documentation](https://github.com/DefectDojo/django-DefectDojo/blob/master/dojo/settings/settings.py) and [extra settings](https://github.com/DefectDojo/django-DefectDojo/blob/master/docker/extra_settings/README.md)
To complete
DD_AUTHORIZED_USERS_ALLOW_CHANGE: Grants Active users (e.g regular users) the ability to perform changes for the Products they are authorized. DD_AUTHORIZED_USERS_ALLOW_DELETE: Grants Active users (e.g regular users) delete powers for the Products they are authorized. DD_SITE_URL: DD_DEBUG: DD_DJANGO_METRICS_ENABLED: DD_LOGIN_REDIRECT_URL: DD_DJANGO_ADMIN_ENABLED: DD_SESSION_COOKIE_HTTPONLY: DD_CSRF_COOKIE_HTTPONLY: DD_SECURE_SSL_REDIRECT: DD_SECURE_HSTS_INCLUDE_SUBDOMAINS: DD_SECURE_HSTS_SECONDS: DD_SESSION_COOKIE_SECURE: DD_CSRF_COOKIE_SECURE: DD_SECURE_BROWSER_XSS_FILTER: DD_SECURE_CONTENT_TYPE_NOSNIFF: DD_TIME_ZONE: DD_LANG: DD_WKHTMLTOPDF: DD_TEAM_NAME: DD_ADMINS: DD_WHITENOISE: DD_TRACK_MIGRATIONS: DD_SECURE_PROXY_SSL_HEADER: DD_TEST_RUNNER: DD_URL_PREFIX: DD_ROOT: DD_LANGUAGE_CODE: DD_SITE_ID: DD_USE_I18N: DD_USE_L10N: DD_USE_TZ: DD_MEDIA_URL: DD_MEDIA_ROOT: DDimages_URL: DDimages_ROOT: DD_CELERY_BROKER_URL: DD_CELERY_BROKER_SCHEME: DD_CELERY_BROKER_USER: DD_CELERY_BROKER_PASSWORD: DD_CELERY_BROKER_HOST: DD_CELERY_BROKER_PORT: DD_CELERY_BROKER_PATH: DD_CELERY_TASK_IGNORE_RESULT: DD_CELERY_RESULT_BACKEND: DD_CELERY_RESULT_EXPIRES: DD_CELERY_BEAT_SCHEDULE_FILENAME: DD_CELERY_TASK_SERIALIZER: DD_FORCE_LOWERCASE_TAGS: DD_FOOTER_VERSION: Optionally pass a custom version string displayed in the footer of all pages (base.</description></item><item><title>Defect Dojo Burp-Plugin</title><link>https://DefectDojo.github.io/django-DefectDojo/integrations/burp-plugin/</link><pubDate>Tue, 02 Feb 2021 20:46:28 +0100</pubDate><guid>https://DefectDojo.github.io/django-DefectDojo/integrations/burp-plugin/</guid><description>This is Burp Plugin to export findings directly to Defect Dojo .
Installation In order for the plugin to work , you will need to have Jython set up in Burp Suite Pro . To use this plugin before it appears in the BApp Store you will need to do the following :
Go to [Extender]{.title-ref} and select the [Extensions]{.title-ref} tab Click on [Add]{.title-ref} , select [Extension Type:]{.title-ref} to be [Python]{.</description></item><item><title>DefectDojo API Documentation</title><link>https://DefectDojo.github.io/django-DefectDojo/integrations/api-docs/</link><pubDate>Tue, 02 Feb 2021 20:46:28 +0100</pubDate><guid>https://DefectDojo.github.io/django-DefectDojo/integrations/api-docs/</guid><description>::: {.warning} ::: {.admonition-title} Warning :::
API v1 is deprecated and will be no longer maintained after 12-31-2020. API v1 will be removed on 06-30-2021. Please move to API v2 and raise issues for any unsupported operations. :::
DefectDojo's API is created using Tastypie. The documentation of each endpoint is available within each DefectDojo installation at [/api/v1/doc/]{.title-ref} and can be accessed by choosing the API Docs link on the user drop down menu in the header.</description></item><item><title>DefectDojo API v2 Documentation</title><link>https://DefectDojo.github.io/django-DefectDojo/integrations/api-v2-docs/</link><pubDate>Tue, 02 Feb 2021 20:46:28 +0100</pubDate><guid>https://DefectDojo.github.io/django-DefectDojo/integrations/api-v2-docs/</guid><description>DefectDojo's API is created using Django Rest Framework. The documentation of each endpoint is available within each DefectDojo installation at [/api/v2/doc/]{.title-ref} and can be accessed by choosing the API v2 Docs link on the user drop down menu in the header.
The documentation is generated using Django Rest Framework Swagger, and is interactive.
To interact with the documentation, a valid Authorization header value is needed. Visit the [/api/v2/key/]{.title-ref} view to generate your API Key (Token &amp;lt;api_key&amp;gt;) and copy the header value provided.</description></item><item><title>Documentation</title><link>https://DefectDojo.github.io/django-DefectDojo/contributing/documentation/</link><pubDate>Tue, 02 Feb 2021 20:46:28 +0100</pubDate><guid>https://DefectDojo.github.io/django-DefectDojo/contributing/documentation/</guid><description>The documentation is build with Hugo and uses the theme Learn. The source code is located in the docs folder. Static files for the webside are build with github actions and are publish in the gh-pages branch.
How to run a local preview Install Hugo Clone the DefectDojo git repository with the option --recurse-submodules. If you have already cloned the repository, make sure that you have checkouted out the hugo theme learn or use git submoduls check it out cd docs/themes/learn &amp;amp;&amp;amp; git submodule init &amp;amp;&amp;amp; git submodule update Switch to the docs folder and start the hugo server with hot reloading hugo server -D Visit http://localhost:1313/django-DefectDojo.</description></item><item><title>Google Sheets Sync</title><link>https://DefectDojo.github.io/django-DefectDojo/integrations/google-sheets-sync/</link><pubDate>Tue, 02 Feb 2021 20:46:28 +0100</pubDate><guid>https://DefectDojo.github.io/django-DefectDojo/integrations/google-sheets-sync/</guid><description>With the Google Sheets sync feature, DefectDojo allow the users to export all the finding details of each test into a separate Google Spreadsheet. Users can review and edit finding details via Google Spreadsheets. Also, they can add new notes to findings and edit existing notes using the Google Spreadsheet. After reviewing and updating the finding details in the Google Spreadsheet, the user can import (sync) all the changes done via the Google Spreadsheet into DefectDojo database.</description></item><item><title>How to write a DefectDojo parser</title><link>https://DefectDojo.github.io/django-DefectDojo/contributing/how-to-write-a-parser/</link><pubDate>Tue, 02 Feb 2021 20:46:28 +0100</pubDate><guid>https://DefectDojo.github.io/django-DefectDojo/contributing/how-to-write-a-parser/</guid><description>All commands assume that you&amp;rsquo;re located at the root of the django-DefectDojo cloned repo.
Pre-requisites You have forked https://github.com/DefectDojo/django-DefectDojo and cloned locally. Checkout dev and make sure you&amp;rsquo;re up to date with the latest changes. It&amp;rsquo;s advised that you create a dedicated branch for your development, such as git checkout -b parser-name yet that&amp;rsquo;s up to you. It is probably easier to use the docker-compose stack (and benefit from the hot-reload capbility for uWSGI).</description></item><item><title>Import Reports</title><link>https://DefectDojo.github.io/django-DefectDojo/integrations/import/</link><pubDate>Tue, 02 Feb 2021 20:46:28 +0100</pubDate><guid>https://DefectDojo.github.io/django-DefectDojo/integrations/import/</guid><description>DefectDojo has the ability to import reports from other security tools.
Acunetix Scanner XML format.
Anchore-Engine JSON vulnerability report generated by anchore-cli tool, using a command like anchore-cli --json image vuln &amp;lt;image:tag&amp;gt; all
Aqua JSON report format.
Anchore Grype (anchore_grype) Anchore Grype JSON report format generated with -o json option.
grype defectdojo/defectdojo-django:1.13.1 -o json &amp;gt; many_vulns.json Arachni Scanner Arachni Web Scanner (http://arachni-scanner.com/wiki)
Reports are generated with arachni_reporter tool this way:</description></item><item><title>JIRA Integration</title><link>https://DefectDojo.github.io/django-DefectDojo/integrations/jira/</link><pubDate>Tue, 02 Feb 2021 20:46:28 +0100</pubDate><guid>https://DefectDojo.github.io/django-DefectDojo/integrations/jira/</guid><description>DefectDojo's JIRA integration is bidirectional. You may push findings to JIRA and share comments. If an issue is closed in JIRA it will automatically be closed in Dojo.
NOTE: These steps will configure the necessary webhook in JIRA and add JIRA integration into DefectDojo. This isn't sufficient by itself, you will need to configure products and findings to push to JIRA. On a product's settings page you will need to define a: Project Key (and this project must exist in JIRA) JIRA Configuration (select the JIRA configuration that you create in the steps below) Component (can be left blank) Then elect (via tickbox) whether you want to 'Push all issues', 'Enable engagement epic mapping' and/or 'Push notes'.</description></item><item><title>Running in Production</title><link>https://DefectDojo.github.io/django-DefectDojo/running/running-in-production/</link><pubDate>Tue, 02 Feb 2021 20:46:28 +0100</pubDate><guid>https://DefectDojo.github.io/django-DefectDojo/running/running-in-production/</guid><description>Production with docker-compose The docker-compose.yml file in this repository is fully functional to evaluate DefectDojo in your local environment.
Although Docker Compose is one of the supported installation methods to deploy a containerized DefectDojo in a production environment, the docker-compose.yml file is not intended for production use without first customizing it to your particular situation.
Database performance and backup It is recommended to use a dedicated database server and not the preconfigured MySQL database.</description></item><item><title>Setting up Social Authentication via OAuth2 Providers</title><link>https://DefectDojo.github.io/django-DefectDojo/integrations/social-authentication/</link><pubDate>Tue, 02 Feb 2021 20:46:28 +0100</pubDate><guid>https://DefectDojo.github.io/django-DefectDojo/integrations/social-authentication/</guid><description>Auth0 OAuth2 Configuration In the same way as with other Identiy-Providers, it's now possible to leverage Auth0 to authenticate users on DefectDojo.
Inside your Auth0 dashboard create a new application (Applications / Create Application / Single Page Web Application). On the new application set the following fields: Name: &amp;quot;Defectdojo&amp;quot; Allowed Callback URLs: &amp;quot;https://the_hostname_you_have_dojo_deployed:your_server_port/complete/auth0/&amp;quot; Copy the following info from the application: Domain Client ID Client Secret Now, edit the dojo/settings/settings.</description></item><item><title>Slack Notifications</title><link>https://DefectDojo.github.io/django-DefectDojo/integrations/slack-notifications/</link><pubDate>Tue, 02 Feb 2021 20:46:28 +0100</pubDate><guid>https://DefectDojo.github.io/django-DefectDojo/integrations/slack-notifications/</guid><description>Scopes The following scopes have to be granted.
Token The bot token has to be chosen and put in your System Settings</description></item><item><title>Upgrading</title><link>https://DefectDojo.github.io/django-DefectDojo/running/upgrading/</link><pubDate>Tue, 02 Feb 2021 20:46:28 +0100</pubDate><guid>https://DefectDojo.github.io/django-DefectDojo/running/upgrading/</guid><description>Docker-compose When you deploy a vanilla docker-compose, it will create a persistent volume for your MySQL database. As long as your volume is there, you should not lose any data.
Using docker images provided in DockerHub If you're using latest, then you need to pre pull the latest from DockerHub to update.
The generic upgrade method for docker-compose follows these steps:
Pull the latest version
docker pull defectdojo/defectdojo-django:latest docker pull defectdojo/defectdojo-nginx:latest If you would like to use something older (so not the latest version), specify the version (tag) you want to upgrade to:</description></item><item><title>Usage Examples</title><link>https://DefectDojo.github.io/django-DefectDojo/basics/start-using/</link><pubDate>Tue, 02 Feb 2021 20:46:28 +0100</pubDate><guid>https://DefectDojo.github.io/django-DefectDojo/basics/start-using/</guid><description>DefectDojo is designed to make tracking testing engagements simple and intuitive. The models{.interpreted-text role=&amp;ldquo;doc&amp;rdquo;} page will help you understand the terminology we use below, so we recommend taking a look at that first.
Create a new Product Type The first step to using DefectDojo is to create a Product Type. Some examples might be &amp;quot;Mobile Apps&amp;quot; or &amp;quot;New York Office.&amp;quot; The idea is to make it easy to divide your Products into logical categories, based on your organizational structure, or just to divide internal and external applications.</description></item></channel></rss>